name: "CodeQL"

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * 0'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'cpp' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        path: vm-manager

    #- run: |
       #sudo apt-get --quiet update --yes
       #sudo apt-get --quiet install --yes make  devscripts build-essential lintian debhelper

    - run: |
       export CC=/usr/bin/clang
       export CXX=/usr/bin/clang++
       mkdir vm-manager/build/
       cd vm-manager/build/
       cmake ..
       cmake --build .
       cd -

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        #queries: security-extended,security-and-quality

    - run: |
       cd vm-manager/build/
       find src/CMakeFiles/vm-manager.dir/ -iname *.o |xargs rm
       cmake --build .

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    #- name: Autobuild
    #  uses: github/codeql-action/autobuild@v1

    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö https://git.io/JvXDl

    # ‚úèÔ∏è If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language
    #- run: |
    #   sudo apt-get --quiet update --yes
    #   sudo apt-get --quiet install --yes make libglib2.0-dev libncurses-dev libuuid1 uuid-dev libjson-c-dev devscripts build-essential lintian debhelper
    #   make
    #   make release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
