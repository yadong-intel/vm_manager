
#include <memory>
#include <string>
using namespace std;

#include "ftxui/component/captured_mouse.hpp"
#include "ftxui/component/component.hpp"
#include "ftxui/component/component_base.hpp"
#include "ftxui/component/component_options.hpp"
#include "ftxui/component/screen_interactive.hpp"
#include "ftxui/dom/elements.hpp"
#include "ftxui/util/ref.hpp"
#include "ftxui/screen/terminal.hpp"

using namespace ftxui;

#include "tui.h"
#include "config_parser.h"

#define LAYOUT_MAX_WIDTH 160

auto screen = ScreenInteractive::TerminalOutput();

void btn_on_save()
{
    screen.ExitLoopClosure();
    screen.Clear();
}

void btn_on_exit()
{
    screen.ExitLoopClosure();
}

int create_tui(void)
{
    string name;
    string status;
    Component input_name = Input(&name, "name");

    vector<string> firmware_type = { FIRM_OPTS_UNIFIED_STR, FIRM_OPTS_SPLITED_STR };
    int firmware_type_selected = 0;
    auto fm = Toggle(&firmware_type, &firmware_type_selected);
    string fm_unified_bin;
    string fm_splited_code;
    string fm_splited_data;
    auto input_fm_unified = Input(&fm_unified_bin, "Unified firmware binary path");
    auto input_fm_splited_code = Input(&fm_splited_code, "Splited firmware code binary path");
    auto input_fm_splited_data = Input(&fm_splited_data, "Splited firmware data binary path");
    Components input_fm_splited = { input_fm_splited_code, input_fm_splited_data };

    auto fm_tab_un = Container::Vertical({ input_fm_unified });

    auto fm_unified_render = Renderer(fm_tab_un, [&] {
        return hbox({
            text("    ->"), input_fm_unified->Render()
        });
    });


    auto fm_tab_sp = Container::Vertical({ input_fm_vec });

    auto fm_splited_render = Renderer(fm_tab_un, [&] {
        return vbox({
            hbox({ text("    ->"), input_fm_splited[0]->Render(), }),
            hbox({ text("    ->"), input_fm_splited[1]->Render(), }),
        });
    });


    auto fm_tab = Container::Tab(
        {
            fm_unified_render,
            fm_splited_render,
        },
        &firmware_type_selected
    );


    auto input = Container::Vertical({
        input_name,
        fm,
        fm_tab,
    });

    auto save_on = [&]() {
        screen.ExitLoopClosure();
        status += "called save_on!";
        screen.Clear();
    };


    auto btn_save = Button("SAVE", [&]{save_on();});
    auto btn_exit = Button("EXIT", screen.ExitLoopClosure());

    auto buttons = Container::Horizontal({
        btn_save, btn_exit
    });

    auto layout = Container::Vertical({
        input,
        buttons,
    });

    auto render = Renderer(layout, [&] {
        return vbox({
            text("Celadon in VM Configuration") | center,
            vbox({
                hbox(text("name:     "), input_name->Render()),
                hbox(text("firmware: "), fm->Render()),
                hbox(text("    "), fm_tab->Render()),
            }) | border,
            separator(),
            text(status),
            buttons->Render() | center,
       }) | border | size(WIDTH, LESS_THAN, LAYOUT_MAX_WIDTH) ;
    });


    screen.Loop(
        render
    );

    return 0;
}
